!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACCUMULATE_J	push.h	205;"	d
ACCUMULATE_J	push.h	229;"	d
ACCUMULATOR_T	accumulator.h	2;"	d
BOUNDARY_TYPE	simulation_parameters.h	/^        Boundary BOUNDARY_TYPE = Boundary::Periodic;$/;"	m	class:Parameters_
Boundary	simulation_parameters.h	/^enum Boundary {$/;"	g
CELL_BLOCK_FACTOR	types.h	13;"	d
Cell_Index	types.h	/^    Cell_Index, \/\/ This is stored as per VPIC, such that it includes ghost_offsets$/;"	e	enum:UserParticleFields
Charge	types.h	/^    Charge,$/;"	e	enum:UserParticleFields
EM_Field_Solver	fields.h	/^class EM_Field_Solver$/;"	c
ES_Field_Solver	fields.h	/^class ES_Field_Solver$/;"	c
FIELD_CBX	types.h	/^    FIELD_CBX,$/;"	e	enum:FieldFields
FIELD_CBY	types.h	/^    FIELD_CBY,$/;"	e	enum:FieldFields
FIELD_CBZ	types.h	/^    FIELD_CBZ,$/;"	e	enum:FieldFields
FIELD_EX	types.h	/^    FIELD_EX = 0,$/;"	e	enum:FieldFields
FIELD_EY	types.h	/^    FIELD_EY,$/;"	e	enum:FieldFields
FIELD_EZ	types.h	/^    FIELD_EZ,$/;"	e	enum:FieldFields
FIELD_JFX	types.h	/^    FIELD_JFX,$/;"	e	enum:FieldFields
FIELD_JFY	types.h	/^    FIELD_JFY,$/;"	e	enum:FieldFields
FIELD_JFZ	types.h	/^    FIELD_JFZ$/;"	e	enum:FieldFields
FieldFields	types.h	/^enum FieldFields$/;"	g
Field_Solver	fields.h	/^template<typename Solver_Type> class Field_Solver : public Solver_Type$/;"	c
GRID_T	grid.h	2;"	d
INTERPOLATOR_H	interpolator.h	2;"	d
Initializer	initializer.h	/^class Initializer {$/;"	c
NPPC	simulation_parameters.h	/^        size_t NPPC;$/;"	m	class:Parameters_
NX_global	simulation_parameters.h	/^        size_t NX_global;$/;"	m	class:Parameters_
NY_global	simulation_parameters.h	/^        size_t NY_global;$/;"	m	class:Parameters_
NZ_global	simulation_parameters.h	/^        size_t NZ_global;$/;"	m	class:Parameters_
Parameters_	simulation_parameters.h	/^        Parameters_(size_t _nc = 16, size_t _nppc = 32) :$/;"	f	class:Parameters_
Parameters_	simulation_parameters.h	/^template <class real_> class Parameters_$/;"	c
Periodic	simulation_parameters.h	/^    Periodic$/;"	e	enum:Boundary
PositionX	types.h	/^    PositionX = 0,$/;"	e	enum:UserParticleFields
PositionY	types.h	/^    PositionY,$/;"	e	enum:UserParticleFields
PositionZ	types.h	/^    PositionZ,$/;"	e	enum:UserParticleFields
RANK_TO_INDEX	helpers.h	7;"	d
Reflect	simulation_parameters.h	/^    Reflect = 0,$/;"	e	enum:Boundary
SIMULATION_PARAMETERS_H	simulation_parameters.h	2;"	d
UserParticleFields	types.h	/^enum UserParticleFields$/;"	g
VLEN	types.h	8;"	d
VOXEL	helpers.h	18;"	d
VelocityX	types.h	/^    VelocityX,$/;"	e	enum:UserParticleFields
VelocityY	types.h	/^    VelocityY,$/;"	e	enum:UserParticleFields
VelocityZ	types.h	/^    VelocityZ,$/;"	e	enum:UserParticleFields
Visualizer	visualization.h	/^class Visualizer {$/;"	c
absorb_fields	grid.h	/^  absorb_fields         = -4, \/\/ Gamma = 0$/;"	e	enum:grid_enums
absorb_particles	grid.h	/^  absorb_particles  = -2  \/\/ Cell boundary should absorb particles$/;"	e	enum:grid_enums
accumulator_t	accumulator.h	/^      accumulator_t() :$/;"	f	class:accumulator_t
accumulator_t	accumulator.h	/^class accumulator_t {$/;"	c
advance_b	fields.h	/^        void advance_b($/;"	f	class:EM_Field_Solver
advance_b	fields.h	/^        void advance_b($/;"	f	class:ES_Field_Solver
advance_b	fields.h	/^        void advance_b($/;"	f	class:Field_Solver
advance_e	fields.h	/^        void advance_e($/;"	f	class:EM_Field_Solver
advance_e	fields.h	/^        void advance_e($/;"	f	class:ES_Field_Solver
advance_e	fields.h	/^        void advance_e($/;"	f	class:Field_Solver
allow_for_ghosts	helpers.h	/^int allow_for_ghosts(int pre_ghost)$/;"	f
anti_symmetric_fields	grid.h	/^  anti_symmetric_fields = -1, \/\/ E_tang = 0$/;"	e	enum:grid_enums
array_size	types.h	/^const std::size_t array_size = VLEN;$/;"	v
bc	grid.h	/^  int   bc[27];             \/\/ (-1:1,-1:1,-1:1) FORTRAN indexed array of$/;"	m	struct:grid
c	simulation_parameters.h	/^        const real_ c; \/\/ Speed of light$/;"	m	class:Parameters_
cbx	interpolator.h	/^        float cbx, dcbxdx;$/;"	m	class:interpolator_t
cby	interpolator.h	/^        float cby, dcbydy;$/;"	m	class:interpolator_t
cbz	interpolator.h	/^        float cbz, dcbzdz;$/;"	m	class:interpolator_t
cell_blocking	types.h	/^const size_t cell_blocking = CELL_BLOCK_FACTOR;$/;"	v
cvac	grid.h	/^  float dt, cvac, eps0;$/;"	m	struct:grid
d2exdydz	interpolator.h	/^        float ex, dexdy, dexdz, d2exdydz;$/;"	m	class:interpolator_t
d2eydzdx	interpolator.h	/^        float ey, deydz, deydx, d2eydzdx;$/;"	m	class:interpolator_t
d2ezdxdy	interpolator.h	/^        float ez, dezdx, dezdy, d2ezdxdy;$/;"	m	class:interpolator_t
dV	grid.h	/^  float dx, dy, dz, dV;     \/\/ Cell dimensions and volume (CONVENIENCE ...$/;"	m	struct:grid
dcbxdx	interpolator.h	/^        float cbx, dcbxdx;$/;"	m	class:interpolator_t
dcbydy	interpolator.h	/^        float cby, dcbydy;$/;"	m	class:interpolator_t
dcbzdz	interpolator.h	/^        float cbz, dcbzdz;$/;"	m	class:interpolator_t
detect_leaving_domain	move_p.h	/^bool detect_leaving_domain(size_t ii, size_t face, size_t nx, size_t ny, size_t nz)$/;"	f
dexdy	interpolator.h	/^        float ex, dexdy, dexdz, d2exdydz;$/;"	m	class:interpolator_t
dexdz	interpolator.h	/^        float ex, dexdy, dexdz, d2exdydz;$/;"	m	class:interpolator_t
deydx	interpolator.h	/^        float ey, deydz, deydx, d2eydzdx;$/;"	m	class:interpolator_t
deydz	interpolator.h	/^        float ey, deydz, deydx, d2eydzdx;$/;"	m	class:interpolator_t
dezdx	interpolator.h	/^        float ez, dezdx, dezdy, d2ezdxdy;$/;"	m	class:interpolator_t
dezdy	interpolator.h	/^        float ez, dezdx, dezdy, d2ezdxdy;$/;"	m	class:interpolator_t
dispx	types.h	/^  float dispx, dispy, dispz; \/\/ Displacement of particle$/;"	m	class:particle_mover_t
dispy	types.h	/^  float dispx, dispy, dispz; \/\/ Displacement of particle$/;"	m	class:particle_mover_t
dispz	types.h	/^  float dispx, dispy, dispz; \/\/ Displacement of particle$/;"	m	class:particle_mover_t
dt	grid.h	/^  float dt, cvac, eps0;$/;"	m	struct:grid
dt	simulation_parameters.h	/^        double dt;$/;"	m	class:Parameters_
dx	grid.h	/^  float dx, dy, dz, dV;     \/\/ Cell dimensions and volume (CONVENIENCE ...$/;"	m	struct:grid
dx	simulation_parameters.h	/^        real_ dx;$/;"	m	class:Parameters_
dy	grid.h	/^  float dx, dy, dz, dV;     \/\/ Cell dimensions and volume (CONVENIENCE ...$/;"	m	struct:grid
dy	simulation_parameters.h	/^        real_ dy;$/;"	m	class:Parameters_
dz	grid.h	/^  float dx, dy, dz, dV;     \/\/ Cell dimensions and volume (CONVENIENCE ...$/;"	m	struct:grid
dz	simulation_parameters.h	/^        real_ dz;$/;"	m	class:Parameters_
eps	simulation_parameters.h	/^        const real_ eps; \/\/ permittivity of free space$/;"	m	class:Parameters_
eps0	grid.h	/^  float dt, cvac, eps0;$/;"	m	struct:grid
ex	interpolator.h	/^        float ex, dexdy, dexdz, d2exdydz;$/;"	m	class:interpolator_t
ey	interpolator.h	/^        float ey, deydz, deydx, d2eydzdx;$/;"	m	class:interpolator_t
ez	interpolator.h	/^        float ez, dezdx, dezdy, d2ezdxdy;$/;"	m	class:interpolator_t
finalize	visualization.h	/^        void finalize()$/;"	f	class:Visualizer
ghost_offset	simulation_parameters.h	/^        size_t ghost_offset; \/\/ Where the cell id needs to start for a "real" cell, basically nx$/;"	m	class:Parameters_
grid	grid.h	/^typedef struct grid {$/;"	s
grid_enums	grid.h	/^enum grid_enums {$/;"	g
grid_t	grid.h	/^} grid_t;$/;"	t	typeref:struct:grid
i	types.h	/^  int32_t i;                 \/\/ Index of the particle to move$/;"	m	class:particle_mover_t
initialize_interpolator	initializer.h	/^        static void initialize_interpolator(interpolator_array_t& f0)$/;"	f	class:Initializer
initialize_params	initializer.h	/^        static void initialize_params(size_t _nc = 16, size_t _nppc = 16)$/;"	f	class:Initializer
initialize_particles	initializer.h	/^        static void initialize_particles( particle_list_t particles)$/;"	f	class:Initializer
instance	simulation_parameters.h	/^        static Parameters_& instance()$/;"	f	class:Parameters_
interpolator_t	interpolator.h	/^        interpolator_t() :$/;"	f	class:interpolator_t
interpolator_t	interpolator.h	/^class interpolator_t {$/;"	c
jx	accumulator.h	/^      float jx[4];   \/\/ jx0@(0,-1,-1),jx1@(0,1,-1),jx2@(0,-1,1),jx3@(0,1,1)$/;"	m	class:accumulator_t
jy	accumulator.h	/^      float jy[4];   \/\/ jy0@(-1,0,-1),jy1@(-1,0,1),jy2@(1,0,-1),jy3@(1,0,1)$/;"	m	class:accumulator_t
jz	accumulator.h	/^      float jz[4];   \/\/ jz0@(-1,-1,0),jz1@(1,-1,0),jz2@(-1,1,0),jz3@(1,1,0)$/;"	m	class:accumulator_t
len_x	simulation_parameters.h	/^        real_ len_x;$/;"	m	class:Parameters_
len_x_global	simulation_parameters.h	/^        real_ len_x_global;$/;"	m	class:Parameters_
len_y	simulation_parameters.h	/^        real_ len_y;$/;"	m	class:Parameters_
len_y_global	simulation_parameters.h	/^        real_ len_y_global;$/;"	m	class:Parameters_
len_z	simulation_parameters.h	/^        real_ len_z;$/;"	m	class:Parameters_
len_z_global	simulation_parameters.h	/^        real_ len_z_global;$/;"	m	class:Parameters_
load_interpolator_array	interpolator.cpp	/^void load_interpolator_array($/;"	f
local_x_max	simulation_parameters.h	/^        real_ local_x_max;$/;"	m	class:Parameters_
local_x_min	simulation_parameters.h	/^        real_ local_x_min;$/;"	m	class:Parameters_
local_y_max	simulation_parameters.h	/^        real_ local_y_max;$/;"	m	class:Parameters_
local_y_min	simulation_parameters.h	/^        real_ local_y_min;$/;"	m	class:Parameters_
local_z_max	simulation_parameters.h	/^        real_ local_z_max;$/;"	m	class:Parameters_
local_z_min	simulation_parameters.h	/^        real_ local_z_min;$/;"	m	class:Parameters_
logger	logger.h	3;"	d
logger	logger.h	5;"	d
main	example.cpp	/^int main( int argc, char* argv[] )$/;"	f
metal_fields	grid.h	/^  metal_fields          = -1,$/;"	e	enum:grid_enums
move_p	move_p.h	/^KOKKOS_INLINE_FUNCTION int move_p($/;"	f
mu	simulation_parameters.h	/^        const real_ mu; \/\/ permeability of free space$/;"	m	class:Parameters_
neighbor	grid.h	/^  int64_t* neighbor;$/;"	m	struct:grid
num_cells	simulation_parameters.h	/^        size_t num_cells; \/\/ This should *include* the ghost cells$/;"	m	class:Parameters_
num_ghosts	simulation_parameters.h	/^        size_t num_ghosts;$/;"	m	class:Parameters_
num_particles	simulation_parameters.h	/^        size_t num_particles;$/;"	m	class:Parameters_
num_real_cells	simulation_parameters.h	/^        size_t num_real_cells;$/;"	m	class:Parameters_
num_species	simulation_parameters.h	/^        size_t num_species;$/;"	m	class:Parameters_
num_steps	simulation_parameters.h	/^        int num_steps;$/;"	m	class:Parameters_
nv	grid.h	/^  int   sx, sy, sz, nv;     \/\/ Voxel indexing x-, y-,z- strides and the$/;"	m	struct:grid
nx	grid.h	/^  int   nx, ny, nz;         \/\/ Local voxel mesh resolution.  Voxels are$/;"	m	struct:grid
nx	simulation_parameters.h	/^        size_t nx;$/;"	m	class:Parameters_
ny	grid.h	/^  int   nx, ny, nz;         \/\/ Local voxel mesh resolution.  Voxels are$/;"	m	struct:grid
ny	simulation_parameters.h	/^        size_t ny;$/;"	m	class:Parameters_
nz	grid.h	/^  int   nx, ny, nz;         \/\/ Local voxel mesh resolution.  Voxels are$/;"	m	struct:grid
nz	simulation_parameters.h	/^        size_t nz;$/;"	m	class:Parameters_
particle_mover_t	types.h	/^class particle_mover_t {$/;"	c
pec_fields	grid.h	/^  pec_fields            = -1,$/;"	e	enum:grid_enums
pic_EM_fields_h	fields.h	2;"	d
pic_helper_h	helpers.h	2;"	d
pic_init_h	initializer.h	2;"	d
pic_move_p_h	move_p.h	2;"	d
pic_push_h	push.h	2;"	d
pic_types_h	types.h	2;"	d
pic_visualization_h	visualization.h	2;"	d
pmc_fields	grid.h	/^  pmc_fields            = -3, \/\/ B_tang = 0, B_norm floats$/;"	e	enum:grid_enums
pre_scalars	visualization.h	/^        void pre_scalars(size_t num_particles)$/;"	f	class:Visualizer
print_particles	helpers.h	/^void print_particles( const particle_list_t particles )$/;"	f
print_run_details	simulation_parameters.h	/^        void print_run_details()$/;"	f	class:Parameters_
push	push.h	/^void push($/;"	f
r8V	grid.h	/^  float rdx, rdy, rdz, r8V; \/\/ Inverse voxel dimensions and one over$/;"	m	struct:grid
rand_float	initializer.h	/^        static const float rand_float(float min = 0, float max = 1)$/;"	f	class:Initializer
range	grid.h	/^  int64_t* range;$/;"	m	struct:grid
rangeh	grid.h	/^  int64_t rangel, rangeh; \/\/ Redundant for move_p performance reasons:$/;"	m	struct:grid
rangel	grid.h	/^  int64_t rangel, rangeh; \/\/ Redundant for move_p performance reasons:$/;"	m	struct:grid
rdx	grid.h	/^  float rdx, rdy, rdz, r8V; \/\/ Inverse voxel dimensions and one over$/;"	m	struct:grid
rdy	grid.h	/^  float rdx, rdy, rdz, r8V; \/\/ Inverse voxel dimensions and one over$/;"	m	struct:grid
rdz	grid.h	/^  float rdx, rdy, rdz, r8V; \/\/ Inverse voxel dimensions and one over$/;"	m	struct:grid
real_t	types.h	4;"	d
reflect_particles	grid.h	/^  reflect_particles = -1, \/\/ Cell boundary should reflect particles$/;"	e	enum:grid_enums
step	grid.h	/^  int64_t step;             \/\/ Current timestep$/;"	m	struct:grid
sx	grid.h	/^  int   sx, sy, sz, nv;     \/\/ Voxel indexing x-, y-,z- strides and the$/;"	m	struct:grid
sy	grid.h	/^  int   sx, sy, sz, nv;     \/\/ Voxel indexing x-, y-,z- strides and the$/;"	m	struct:grid
symmetric_fields	grid.h	/^  symmetric_fields      = -2, \/\/ B_tang = 0, B_norm = 0$/;"	e	enum:grid_enums
sz	grid.h	/^  int   sx, sy, sz, nv;     \/\/ Voxel indexing x-, y-,z- strides and the$/;"	m	struct:grid
t0	grid.h	/^  double t0;                \/\/ Simulation time corresponding to step 0$/;"	m	struct:grid
uncenter_h	uncenter_p.h	2;"	d
uncenter_particles	uncenter_p.h	/^void uncenter_particles($/;"	f
unload_accumulator_array	accumulator.cpp	/^void unload_accumulator_array($/;"	f
vis_file	visualization.h	/^        std::ofstream vis_file;$/;"	m	class:Visualizer
write_cell_types	visualization.h	/^        void write_cell_types(size_t num_particles)$/;"	f	class:Visualizer
write_header	visualization.h	/^        void write_header(size_t total_num_particles, size_t step) {$/;"	f	class:Visualizer
write_particles_index	visualization.h	/^        void write_particles_index(particle_list_t& particles)$/;"	f	class:Visualizer
write_particles_position	visualization.h	/^        void write_particles_position(particle_list_t& particles)$/;"	f	class:Visualizer
write_particles_property_header	visualization.h	/^        void write_particles_property_header(std::string name, size_t num_particles)$/;"	f	class:Visualizer
write_particles_sp	visualization.h	/^        void write_particles_sp(particle_list_t& particles, size_t sn)$/;"	f	class:Visualizer
write_particles_w	visualization.h	/^        void write_particles_w(particle_list_t& particles)$/;"	f	class:Visualizer
write_vis	visualization.h	/^        void write_vis(particle_list_t particles, size_t step)$/;"	f	class:Visualizer
x0	grid.h	/^  float x0, y0, z0;         \/\/ Min corner local domain (must be coherent)$/;"	m	struct:grid
x1	grid.h	/^  float x1, y1, z1;         \/\/ Max corner local domain (must be coherent)$/;"	m	struct:grid
y0	grid.h	/^  float x0, y0, z0;         \/\/ Min corner local domain (must be coherent)$/;"	m	struct:grid
y1	grid.h	/^  float x1, y1, z1;         \/\/ Max corner local domain (must be coherent)$/;"	m	struct:grid
z0	grid.h	/^  float x0, y0, z0;         \/\/ Min corner local domain (must be coherent)$/;"	m	struct:grid
z1	grid.h	/^  float x1, y1, z1;         \/\/ Max corner local domain (must be coherent)$/;"	m	struct:grid
